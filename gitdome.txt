创建版本库
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
	使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	使用命令git commit -m <message>，完成。
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
版本回退
	上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	git reset --hard HEAD^
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
	git reset --hard 1094a
	
	
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
撤销修改
	git checkout -- file可以丢弃工作区的修改：
	git reset HEAD <file>可以把暂存区的修改撤销掉
	git status查看暂存区状态
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
删除文件
	rm file 删除
	要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
	git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
远程仓库
	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
从远程库克隆
	git clone
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
创建分支
	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>或者git switch <name>

	创建+切换分支：git checkout -b <name>或者git switch -c <name>

	合并某分支到当前分支：git merge <name>

	删除分支：git branch -d <name>

	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
分支管理策略
	准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
	git log --graph --pretty=oneline --abbrev-commit 查看分支历史
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
	而fast forward合并就看不出来曾经做过合并
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
	Bug 分支
	git stash 功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作 
	git stash list 查看"储藏" 的分支
	一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

	另一种方式是用git stash pop，恢复的同时把stash内容也删了
	cherry-pick命令，让我们能复制一个特定的提交到当前分支  git cherry-pick 4c805e2
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
Feature分支
	添加新功能分支
	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
多人协作
	查看远程库的信息，用git remote
	用git remote -v显示更详细的信息
	多人协作的工作模式通常是这样：

	首先，可以试图用git push origin <branch-name>推送自己的修改；

	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

	如果合并有冲突，则解决冲突，并在本地提交；

	没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

	如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
	用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------eee----------------
	--------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------
	123456df
	--------------------------------------------------------------------------------------------

	12346dfsfdfsdsfd

	1234564984894894894948949498489
	--------------------------------------------------------------------------------------------

	--------------------------------------------------------------------------------------------
